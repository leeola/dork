// Generated by CoffeeScript 1.3.3
(function() {
  var before, before_each, describe, it, should;

  should = require('should');

  before = global.before;

  before_each = global.beforeEach;

  describe = global.describe;

  it = global.it;

  describe('Suite', function() {
    var Runner, Suite, Test;
    Suite = require('../lib/suite').Suite;
    Runner = require('../lib/runner').Runner;
    Test = require('../lib/test').Test;
    describe('#()', function() {});
    describe('#add_suite()', function() {
      var suite;
      suite = null;
      before_each(function() {
        return suite = new Suite();
      });
      return it('should append the suite to the stack', function() {
        var new_suite;
        new_suite = new Suite();
        suite.add_suite(new_suite);
        return suite._tests_and_suites.should.eql([new_suite]);
      });
    });
    describe('#add_test()', function() {
      var new_test, suite;
      suite = new_test = null;
      before_each(function() {
        suite = new Suite();
        return new_test = new Test();
      });
      return it('should append the test to the stack', function() {
        suite.add_test(new_test);
        return suite._tests_and_suites.should.eql([new_test]);
      });
    });
    describe('#add_after_all()', function() {
      var runner, suite;
      suite = runner = null;
      before_each(function() {
        suite = new Suite();
        return runner = new Runner();
      });
      return it('should append the runner to the stack', function() {
        suite.add_after_all(runner);
        return suite._after_alls.should.eql([runner]);
      });
    });
    describe('#add_after_eachs()', function() {
      var runner, suite;
      suite = runner = null;
      before_each(function() {
        suite = new Suite();
        return runner = new Runner();
      });
      return it('should append the runner to the stack', function() {
        suite.add_after_each(runner);
        return suite._after_eachs.should.eql([runner]);
      });
    });
    describe('#add_before_all()', function() {
      var runner, suite;
      suite = runner = null;
      before_each(function() {
        suite = new Suite();
        return runner = new Runner();
      });
      return it('should append the runner to the stack', function() {
        suite.add_before_all(runner);
        return suite._before_alls.should.eql([runner]);
      });
    });
    return describe('#add_before_eachs()', function() {
      var runner, suite;
      suite = runner = null;
      before_each(function() {
        suite = new Suite();
        return runner = new Runner();
      });
      return it('should append the runner to the stack', function() {
        suite.add_before_each(runner);
        return suite._before_eachs.should.eql([runner]);
      });
    });
  });

  describe('A suite', function() {
    var Runner, Suite, Test, run_log, suite;
    Suite = require('../lib/suite').Suite;
    Runner = require('../lib/runner').Runner;
    Test = require('../lib/test').Test;
    suite = null;
    run_log = null;
    before_each(function() {
      run_log = [];
      return suite = new Suite();
    });
    describe('with two tests', function() {
      var test_count_a, test_count_b;
      test_count_a = test_count_b = null;
      before_each(function() {
        test_count_a = 0;
        test_count_b = 0;
        suite.add_test(new Test(function() {
          return test_count_a += 1;
        }));
        return suite.add_test(new Test(function() {
          return test_count_b += 1;
        }));
      });
      it('should run all tests when suite is run', function() {
        suite.run();
        test_count_a.should.equal(1);
        return test_count_b.should.equal(1);
      });
      return describe('and a subsuite', function() {
        var subsuite;
        subsuite = null;
        before_each(function() {
          subsuite = new Suite();
          return suite.add_suite(subsuite);
        });
        it('should run all tests when suite is run', function() {
          suite.run();
          test_count_a.should.equal(1);
          return test_count_b.should.equal(1);
        });
        return describe('with a test', function() {
          var test_count_c;
          test_count_c = null;
          before_each(function() {
            test_count_c = 0;
            return subsuite.add_test(new Test(function() {
              return test_count_c += 1;
            }));
          });
          it('should run all tests when suite is run', function() {
            suite.run();
            test_count_a.should.equal(1);
            test_count_b.should.equal(1);
            return test_count_c.should.equal(1);
          });
          return it('should run only the subsuite test when subsuite is run', function() {
            subsuite.run();
            test_count_a.should.equal(0);
            test_count_b.should.equal(0);
            return test_count_c.should.equal(1);
          });
        });
      });
    });
    describe('with a before_all', function() {
      before_each(function() {
        return suite.add_before_all(new Runner(function() {
          return run_log.push('suite.before_all');
        }));
      });
      it('should not be run with no tests', function() {
        suite.run();
        return run_log.should.eql([]);
      });
      describe('and a test', function() {
        before_each(function() {
          return suite.add_test(new Test(function() {
            return run_log.push('suite.test');
          }));
        });
        return it('should run before_all then test', function() {
          suite.run();
          return run_log.should.eql(['suite.before_all', 'suite.test']);
        });
      });
      return describe('and a subsuite', function() {
        var subsuite;
        subsuite = null;
        before_each(function() {
          subsuite = new Suite();
          return suite.add_suite(subsuite);
        });
        it('should not run anything with no tests', function() {
          suite.run();
          return run_log.should.eql([]);
        });
        return describe('with tests', function() {
          before_each(function() {
            subsuite.add_test(new Test(function() {
              return run_log.push('subsuite.test_a');
            }));
            return subsuite.add_test(new Test(function() {
              return run_log.push('subsuite.test_b');
            }));
          });
          return it('should run before_all then the subsuite tests', function() {
            suite.run();
            return run_log.should.eql(['suite.before_all', 'subsuite.test_a', 'subsuite.test_b']);
          });
        });
      });
    });
    describe('with a before_each', function() {
      before_each(function() {
        return suite.add_before_each(new Runner(function() {
          return run_log.push('suite.before_each');
        }));
      });
      return it('should not be run with no tests', function() {
        suite.run();
        return run_log.should.eql([]);
      });
    });
    describe('with an after_all', function() {
      before_each(function() {
        return suite.add_after_all(new Runner(function() {
          return run_log.push('suite.after_all');
        }));
      });
      return it('should not be run with no tests', function() {
        suite.run();
        return run_log.should.eql([]);
      });
    });
    return describe('with an after_each', function() {
      before_each(function() {
        return suite.add_after_each(new Runner(function() {
          return run_log.push('suite.after_each');
        }));
      });
      return it('should not be run with no tests', function() {
        suite.run();
        return run_log.should.eql([]);
      });
    });
  });

  describe('A suite with a kitchen sink', function() {
    var Runner, Suite, Test, run_log, subsubsuite, subsuite, subsuite_b, suite;
    Suite = require('../lib/suite').Suite;
    Runner = require('../lib/runner').Runner;
    Test = require('../lib/test').Test;
    run_log = null;
    suite = subsuite = subsubsuite = subsuite_b = null;
    before_each(function() {
      run_log = [];
      suite = new Suite();
      subsuite = new Suite();
      subsubsuite = new Suite();
      subsuite_b = new Suite();
      suite.add_before_all(new Runner(function() {
        return run_log.push('suite.before_all_a');
      }));
      suite.add_before_all(new Runner(function() {
        return run_log.push('suite.before_all_b');
      }));
      suite.add_before_each(new Runner(function() {
        return run_log.push('suite.before_each');
      }));
      suite.add_test(new Test(function() {
        return run_log.push('suite.test_a');
      }));
      suite.add_test(new Test(function() {
        return run_log.push('suite.test_b');
      }));
      suite.add_after_each(new Runner(function() {
        return run_log.push('suite.after_each');
      }));
      suite.add_after_all(new Runner(function() {
        return run_log.push('suite.after_all');
      }));
      suite.add_suite(subsuite);
      suite.add_suite(subsuite_b);
      subsuite.add_suite(subsubsuite);
      subsuite.add_before_all(new Runner(function() {
        return run_log.push('subsuite.before_all');
      }));
      subsuite.add_before_each(new Runner(function() {
        return run_log.push('subsuite.before_each');
      }));
      subsuite.add_test(new Test(function() {
        return run_log.push('subsuite.test');
      }));
      subsuite.add_after_all(new Runner(function() {
        return run_log.push('subsuite.after_all');
      }));
      subsuite.add_after_each(new Runner(function() {
        return run_log.push('subsuite.after_each');
      }));
      subsubsuite.add_test(new Test(function() {
        return run_log.push('subsubsuite.test');
      }));
      return subsuite_b.add_before_all(new Runner(function() {
        return run_log.push('subsuite_b.before_all');
      }));
    });
    it('should match the expected result when running suite', function() {
      suite.run();
      return run_log.should.eql(['suite.before_all_a', 'suite.before_all_b', 'suite.before_each', 'suite.test_a', 'suite.after_each', 'suite.before_each', 'suite.test_b', 'suite.after_each', 'subsuite.before_all', 'suite.before_each', 'subsuite.before_each', 'subsubsuite.test', 'subsuite.after_each', 'suite.after_each', 'suite.before_each', 'subsuite.before_each', 'subsuite.test', 'subsuite.after_each', 'suite.after_each', 'subsuite.after_all', 'suite.after_all']);
    });
    it('should match the expected result when running subsuite', function() {
      subsuite.run();
      return run_log.should.eql(['subsuite.before_all', 'subsuite.before_each', 'subsubsuite.test', 'subsuite.after_each', 'subsuite.before_each', 'subsuite.test', 'subsuite.after_each', 'subsuite.after_all']);
    });
    it('should match the expected result when running subsubsuite', function() {
      subsubsuite.run();
      return run_log.should.eql(['subsubsuite.test']);
    });
    return it('should match the expected result when running subsuite_b', function() {
      subsuite_b.run();
      return run_log.should.eql([]);
    });
  });

}).call(this);
