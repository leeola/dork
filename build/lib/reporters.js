// Generated by CoffeeScript 1.3.3
(function() {
  var Reporter, SimpleReporter, parse_error,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  parse_error = function(error) {
    var stack;
    stack = error.stack.split('\n    ').slice(1);
    return error = {
      name: error.name,
      message: error.message,
      stack: stack
    };
  };

  Reporter = (function() {

    function Reporter(suite) {
      this._suite_end = __bind(this._suite_end, this);

      this._suite_start = __bind(this._suite_start, this);

      this._test_end = __bind(this._test_end, this);

      this._test_start = __bind(this._test_start, this);

      this._complete = __bind(this._complete, this);
      if (suite != null) {
        this.listen(suite);
      }
    }

    Reporter.prototype._complete = function() {};

    Reporter.prototype._test_start = function() {};

    Reporter.prototype._test_end = function() {};

    Reporter.prototype._suite_start = function() {};

    Reporter.prototype._suite_end = function() {};

    Reporter.prototype.end = function(suite) {
      suite.remove('test_start', this._test_start);
      suite.remove('test_end', this._test_end);
      suite.remove('suite_start', this._suite_start);
      suite.remove('suite_end', this._suite_end);
      return suite.remove('complete', this._complete);
    };

    Reporter.prototype.listen = function(suite) {
      suite.on('test_start', this._test_start);
      suite.on('test_end', this._test_end);
      suite.on('suite_start', this._suite_start);
      suite.on('suite_end', this._suite_end);
      return suite.on('complete', this._complete);
    };

    Reporter.prototype.report = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.listen.apply(this, args);
    };

    return Reporter;

  })();

  SimpleReporter = (function(_super) {

    __extends(SimpleReporter, _super);

    function SimpleReporter(suite, options) {
      this._test_end = __bind(this._test_end, this);

      this._complete = __bind(this._complete, this);
      SimpleReporter.__super__.constructor.call(this, suite);
      this._write = function() {
        var args, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return (_ref = process.stdout).write.apply(_ref, args);
      };
    }

    SimpleReporter.prototype._complete = function(data) {
      var total_failed, total_passed, total_tests;
      total_tests = data.tests.all.length;
      total_passed = data.tests.passed.length;
      total_failed = data.tests.failed.length;
      if (total_passed === total_tests) {
        return this._write("" + total_tests + " tests complete\n");
      } else if ((total_failed + total_passed) < total_tests) {
        return this._write(("" + total_failed + " failed of " + total_passed + " run, ") + ("" + total_tests + " possible\n"));
      } else {
        return this._write("" + total_failed + " out of " + total_tests + " failed.\n");
      }
    };

    SimpleReporter.prototype._test_end = function(report) {
      var error;
      if (!report.success) {
        error = parse_error(report.error);
        this._write("1:id) " + (report.descriptions.join(' ')) + ":\n");
        this._write("  " + error.name + ": " + error.message + "\n");
        return this._write("    " + (error.stack.join('\n    ')) + "\n");
      }
    };

    return SimpleReporter;

  })(Reporter);

  exports.Reporter = Reporter;

  exports.SimpleReporter = SimpleReporter;

  exports.StdoutReporter = SimpleReporter;

}).call(this);
