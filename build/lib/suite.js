// Generated by CoffeeScript 1.3.3
(function() {
  var Runner, Suite, Test, emighter, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  emighter = require('emighter');

  utils = require('./utils');

  Runner = require('./runner').Runner;

  Test = require('./test').Test;

  Suite = (function(_super) {

    __extends(Suite, _super);

    function Suite(description, location) {
      this.description = description;
      this.location = location;
      this._run_runners = __bind(this._run_runners, this);

      this._run = __bind(this._run, this);

      this._next = __bind(this._next, this);

      this._run_suite = __bind(this._run_suite, this);

      this._run_test = __bind(this._run_test, this);

      this._run_before_eachs = __bind(this._run_before_eachs, this);

      this._run_before_alls = __bind(this._run_before_alls, this);

      this._run_after_eachs = __bind(this._run_after_eachs, this);

      this._run_after_alls = __bind(this._run_after_alls, this);

      this._complete = __bind(this._complete, this);

      this._on_child_complete = __bind(this._on_child_complete, this);

      this._on_child_after_each = __bind(this._on_child_after_each, this);

      this._on_child_before_each = __bind(this._on_child_before_each, this);

      this._on_child_before_all = __bind(this._on_child_before_all, this);

      this._before_alls = [];
      this._before_eachs = [];
      this._after_alls = [];
      this._after_eachs = [];
      this._tests_and_suites = [];
      this._session = void 0;
      Suite.__super__.constructor.call(this);
    }

    Suite.prototype._on_child_before_all = function(meta, done) {
      return this._run_before_alls(meta, function() {
        return done();
      });
    };

    Suite.prototype._on_child_before_each = function(meta, done) {
      return this._run_before_eachs(meta, function() {
        return done();
      });
    };

    Suite.prototype._on_child_after_each = function(meta, done) {
      return this._run_after_eachs(meta, function() {
        return done();
      });
    };

    Suite.prototype._on_child_complete = function(data, done) {
      var test, _i, _len, _ref, _ref1, _ref2, _ref3;
      _ref = data.tests.all;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        test = _ref[_i];
        if (this.description != null) {
          [].splice.apply(test.descriptions, [0, 0].concat(_ref1 = this.description)), _ref1;
        }
        this._session.tests.all.push(test);
      }
      (_ref2 = this._session.tests.failed).push.apply(_ref2, data.tests.failed);
      (_ref3 = this._session.tests.passed).push.apply(_ref3, data.tests.passed);
      this.emit('suite_end');
      return this._next();
    };

    Suite.prototype._complete = function() {
      var _this = this;
      return this._run_after_alls(function() {
        return _this.emit('complete', {
          tests: {
            all: _this._session.tests.all,
            failed: _this._session.tests.failed,
            passed: _this._session.tests.passed
          }
        });
      });
    };

    Suite.prototype._run_after_alls = function(callback) {
      var _this = this;
      if (this._session.ran_a_test) {
        return this._run_runners(this._after_alls, function() {
          return _this.emit('after_all', [], function() {
            return callback();
          });
        });
      } else {
        return this.emit('after_all', [], function() {
          return callback();
        });
      }
    };

    Suite.prototype._run_after_eachs = function(meta, callback) {
      var _this = this;
      return this._run_runners(this._after_eachs, function() {
        return _this.emit('after_each', [meta], function() {
          return callback();
        });
      });
    };

    Suite.prototype._run_before_alls = function(meta, callback) {
      var _this = this;
      return this.emit('before_all', [meta], function() {
        if (!_this._session.ran_a_test) {
          _this._session.ran_a_test = true;
          return _this._run_runners(_this._before_alls, function() {
            return callback();
          });
        } else {
          return callback();
        }
      });
    };

    Suite.prototype._run_before_eachs = function(meta, callback) {
      var _this = this;
      return this.emit('before_each', [meta], function() {
        return _this._run_runners(_this._before_eachs, function() {
          return callback();
        });
      });
    };

    Suite.prototype._run_test = function(test, callback) {
      var full_description, matched_pattern, pattern, _i, _len, _ref,
        _this = this;
      this._session.id_index++;
      if (this._session.patterns.length > 0) {
        matched_pattern = false;
        _ref = this._session.patterns;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pattern = _ref[_i];
          if (pattern instanceof RegExp) {
            full_description = ("" + (this._session.descriptions.join(' ')) + " ") + ("" + test._description);
            if (pattern.test(full_description)) {
              matched_pattern = true;
              break;
            }
          } else {
            if (pattern === this._session.id_index) {
              matched_pattern = true;
              break;
            }
          }
        }
        if (!matched_pattern) {
          callback();
          return;
        }
      }
      return this._run_before_alls(this._session.meta, function() {
        return _this._run_before_eachs(_this._session.meta, function() {
          _this.emit('test_start');
          return test.run(function(report) {
            report.id = _this._session.id_index;
            report.descriptions = [_this.description, report.description];
            _this._session.tests.all.push(report);
            if (report.success) {
              _this._session.tests.passed.push(report);
            } else {
              _this._session.tests.failed.push(report);
            }
            _this.emit('test_end', report);
            return _this._run_after_eachs(_this._session.meta, function() {
              return callback();
            });
          });
        });
      });
    };

    Suite.prototype._run_suite = function(suite) {
      var _this = this;
      suite.on('before_all', this._on_child_before_all, {
        callback: true
      });
      suite.on('before_each', this._on_child_before_each, {
        callback: true
      });
      suite.on('after_each', this._on_child_after_each, {
        callback: true
      });
      suite.on('complete', this._on_child_complete, {
        callback: true
      });
      suite.on('test', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.emit.apply(_this, ['test'].concat(__slice.call(args)));
      });
      suite.on('test_start', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.emit.apply(_this, ['test_start'].concat(__slice.call(args)));
      });
      suite.on('test_end', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.emit.apply(_this, ['test_end'].concat(__slice.call(args)));
      });
      suite.on('suite', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.emit.apply(_this, ['suite'].concat(__slice.call(args)));
      });
      suite.on('suite_start', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.emit.apply(_this, ['suite_start'].concat(__slice.call(args)));
      });
      suite.on('suite_end', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.emit.apply(_this, ['suite_end'].concat(__slice.call(args)));
      });
      this.emit('suite_start');
      return suite._run(this._session.patterns, this._session.id_index, this._session.descriptions);
    };

    Suite.prototype._next = function() {
      this._session.item = this._tests_and_suites[++this._session.index];
      if (!(this._session.item != null)) {
        if (this._session.test_reports > 0) {
          return this._run_after_alls();
        } else {
          return this._complete();
        }
      } else if (this._session.item instanceof Suite) {
        return this._run_suite(this._session.item);
      } else {
        return this._run_test(this._session.item, this._next);
      }
    };

    Suite.prototype._run = function(patterns, id_index, descriptions, callback) {
      if (patterns == null) {
        patterns = [];
      }
      if (id_index == null) {
        id_index = 0;
      }
      if (descriptions == null) {
        descriptions = [];
      }
      if (callback == null) {
        callback = function() {};
      }
      descriptions = descriptions.slice(0);
      if (this.description != null) {
        descriptions.push(this.description);
      }
      this._session = {
        descriptions: descriptions,
        ran_a_test: false,
        index: -1,
        id_index: 0,
        tests: {
          all: [],
          failed: [],
          passed: []
        },
        patterns: patterns,
        callback: callback
      };
      return this._next();
    };

    Suite.prototype._run_runners = function(runners, callback, index, reports) {
      var runner,
        _this = this;
      if (index == null) {
        index = 0;
      }
      if (reports == null) {
        reports = [];
      }
      runner = runners[index];
      if (!(runner != null)) {
        callback(reports);
        return;
      }
      return runner.run(function(report) {
        reports.push(report);
        return _this._run_runners(runners, callback, ++index, reports);
      });
    };

    Suite.prototype.add_after_all = function(runner) {
      if (runner instanceof Function) {
        runner = new Runner(runner);
      }
      return this._after_alls.push(runner);
    };

    Suite.prototype.add_after_each = function(runner) {
      if (runner instanceof Function) {
        runner = new Runner(runner);
      }
      return this._after_eachs.push(runner);
    };

    Suite.prototype.add_before_all = function(runner) {
      if (runner instanceof Function) {
        runner = new Runner(runner);
      }
      return this._before_alls.push(runner);
    };

    Suite.prototype.add_before_each = function(runner) {
      if (runner instanceof Function) {
        runner = new Runner(runner);
      }
      return this._before_eachs.push(runner);
    };

    Suite.prototype.add_reporter = function(reporter) {
      return this._reporters.push(reporter);
    };

    Suite.prototype.add_suite = function(suite) {
      return this._tests_and_suites.push(suite);
    };

    Suite.prototype.add_test = function(test) {
      if (test instanceof Function) {
        test = new Test(test);
      }
      return this._tests_and_suites.push(test);
    };

    Suite.prototype.run = function() {
      var callback, i, pattern, patterns, _i, _j, _len;
      patterns = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
      if ((callback != null) && !(callback instanceof Function)) {
        patterns.push(callback);
      }
      for (i = _j = 0, _len = patterns.length; _j < _len; i = ++_j) {
        pattern = patterns[i];
        if (typeof pattern === 'string') {
          patterns[i] = utils.regex_like(pattern);
        }
      }
      return this._run(patterns, 0, [], function(reports) {
        return callback(reports);
      });
    };

    return Suite;

  })(emighter.Emighter);

  exports.create = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args), t = typeof result;
      return t == "object" || t == "function" ? result || child : child;
    })(Suite, args, function(){});
  };

  exports.Suite = Suite;

}).call(this);
