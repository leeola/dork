// Generated by CoffeeScript 1.3.3
(function() {
  var Runner,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Runner = (function() {

    function Runner(_fn, _timeout) {
      this._fn = _fn != null ? _fn : (function() {});
      this._timeout = _timeout != null ? _timeout : 2000;
      this.run = __bind(this.run, this);

      if (this._fn) {
        this.asynchronous = this._fn.length === 1 ? true : false;
      }
    }

    Runner.prototype._create_report = function(time, error) {
      var report;
      if (error != null) {
        report = {
          error: error,
          success: false,
          time: time
        };
      } else {
        report = {
          success: true,
          time: time
        };
      }
      return report;
    };

    Runner.prototype.run = function(callback) {
      var done, running, start_time, timeout_callback, timeout_error,
        _this = this;
      running = true;
      start_time = void 0;
      timeout_error = void 0;
      done = function() {
        if (running) {
          running = false;
          return callback(_this._create_report(new Date() - start_time));
        }
      };
      timeout_callback = function() {
        var time;
        if (running) {
          running = false;
          time = new Date() - start_time;
          return callback(_this._create_report(time, timeout_error));
        }
      };
      start_time = new Date();
      try {
        this._fn(done);
      } catch (error) {
        running = false;
        callback(this._create_report(new Date() - start_time, error));
      }
      if (this.asynchronous) {
        timeout_error = new Error("Execution time exceeded " + this._timeout + "ms timeout");
        return setTimeout(timeout_callback, this._timeout);
      } else {
        return done();
      }
    };

    return Runner;

  })();

  exports.create = function(fn, timeout) {
    return new Runner(fn, timeout);
  };

  exports.Runner = Runner;

}).call(this);
